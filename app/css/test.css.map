{"version":3,"sources":["../_source/sass/test.scss","../_source/_function/mobile-mixin/_rem-calc.scss","test.css"],"names":[],"mappings":"AAEA;EACC,qBAAa;EAAb,qBAAa;EAAb,cAAa;EAEb,oEAAqD;EAArD,4DAAqD;EAErD,cAAa;EACb,gBCkCsE;CCrCtE;;AFKD;EACC,gBC+BsE;CCjCtE","file":"test.css","sourcesContent":["@import \"compass\",\"mobile-mixin\";\n\nbody{\n\tdisplay: flex;\n\t// background: yellow;\n\tbackground-image:linear-gradient(to top,orange,green);\n\t// @include background-image(radial-gradient(45px 45px, cyan 10px, dodgerblue 30px));\n\tcolor: yellow;\n\twidth: rem-calc(90);\n}\n.head{\n\tfont-size: rem-calc(80);\n}\n\n// @include rem-sprites(\"cur/*.png\");\n\n// div{\n// \t@include rem-sprite(\"cur/*.png\",lv1);\n// }\n","// This is the default html and body font-size for the base rem value.\n$rem-base: 16px !default; // $desgin:(27:720, 24:640, 18:480, 12:320 );\n// IMPORT ONCE\n// We use this to prevent styles from being loaded multiple times for compenents that rely on other components. \n$modules: () !default;\n@mixin exports($name) {\n    @if (index($modules, $name)==null) {\n        $modules: append($modules, $name) !global;\n        @content;\n    }\n    @else {\n        @warn \"已存在，请不要重复引用\";\n    }\n}\n\n// ======================\n// @functions\n// ======================\n// STRIP UNIT\n// It strips the unit of measure and returns it\n@function strip-unit($num) {\n    @return $num / ($num * 0 + 1);\n}\n\n// CONVERT TO REM\n// *\n//  * 把px转换成rem\n//  * @param  {Number,String} $value       要转换的值\n//  * @param  {Number} $base-value: $rem-base     计算转换参考的基数，默认16px\n//  * @return {Number,String}              转换后的值\n \n@function convert-to-rem($value, $base-value: $rem-base) {\n    // Check if the value is a number\n    @if type-of($value) !='number' {\n        @if $value !=auto {\n            @warn inspect($value) + ' was passed to rem-calc(), which is not a number or \"auto\".';\n        }\n        @return $value;\n    }\n    // Calculate rem if units for $value is not rem\n    @if unit($value) !='rem' {\n        @if strip-unit($base-value) < 320 {\n            $value: strip-unit($value) / strip-unit($base-value) * 1rem;\n        }\n        @else {\n            $value: strip-unit($value) * 320 / strip-unit($base-value) / 12 * 1rem;\n        }\n    }\n    // Turn 0rem into 0\n    @if $value==0rem {\n        $value: 0;\n    }\n    @return $value;\n}\n\n\n// *\n//  * 将px转换成rem的具体实现\n//  * @param  {Number,Array} $values      要转换的数值，活着一组要转换的数值\n//  * @param  {Number} $base-value: $rem-base     计算转换参考的基数，默认16px\n//  * @return {Number,String}              转换后的值\n \n@function rem-calc($values, $base-value: $rem-base) {\n    $rem-values: ();\n    $count: length($values);\n    @if $count==1 {\n        @return convert-to-rem($values, $base-value);\n    }\n    @for $i from 1 through $count {\n        $rem-values: append($rem-values, convert-to-rem(nth($values, $i), $base-value));\n    }\n    @return $rem-values;\n}\n","body {\n  display: flex;\n  background-image: linear-gradient(to top, #ffa500, #008000);\n  color: yellow;\n  width: 5.625rem;\n}\n\n.head {\n  font-size: 5rem;\n}\n\n\n"],"sourceRoot":"/source/"}